import{_ as o,W as n,X as s,Y as e,Z as r,$ as a,a0 as c,C as i}from"./framework-c8ebc670.js";const l={},h=c('<h1 id="r2dbc-mysql使用配置" tabindex="-1"><a class="header-anchor" href="#r2dbc-mysql使用配置" aria-hidden="true">#</a> R2DBC MySQL使用配置</h1><h2 id="什么是r2dbc" tabindex="-1"><a class="header-anchor" href="#什么是r2dbc" aria-hidden="true">#</a> 什么是R2DBC</h2><p>R2DBC全称 <code>Reactive Relational Database Connectivity</code>，.R2DBC 是一套响应式数据库操作 API 规范。它定义了API ，由驱动程序供应商实现以访问其关系数据库。</p><p>之所以要创建R2DBC是因要需要一个以少量线程和更少硬件资源进行的非阻塞应用栈来处理并发性。使用JDBC标准的API无法满足使用需求，因为使用 <code>线程池</code> 来弥补阻塞处理是有限的。</p><h2 id="什么是-reactive" tabindex="-1"><a class="header-anchor" href="#什么是-reactive" aria-hidden="true">#</a> 什么是 Reactive</h2>',5),d=e("code",null,"reactive",-1),_=e("br",null,null,-1),p={href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.4/README.md#specification",target:"_blank",rel:"noopener noreferrer"},u=e("h2",{id:"reactive-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#reactive-api","aria-hidden":"true"},"#"),r(" Reactive API")],-1),b=e("p",null,[r("Reactive Streams 在互操作性方面发挥着重要作用。对于三方库和基础组件很有用，但作为应用开发API 的用处不大，因为它太低级了。应用开发需要一个更高级别、更丰富、功能更强大的 API 来组合异步逻辑⟩——⟩类似于 Java 8 Stream API，但不仅限于表。这就是 "),e("code",null,"Reactive API"),r(" 的作用。")],-1),f={href:"https://github.com/reactor/reactor",target:"_blank",rel:"noopener noreferrer"},g={href:"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"Mono",-1),v={href:"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"Flux",-1),k=e("code",null,"Mono",-1),x=e("code",null,"Flux",-1),D=e("p",null,"Spring Data R2DBC 需要 Project Reactor 作为核心依赖项，但它可以通过 Reactive Streams 规范与其他反应库进行互操作。作为一般规则，Spring Data R2DBC 存储库接受普通 Publisher 作为输入，在内部将其适应 Reactor 类型，使用它，并返回 Mono 或 Flux 作为输出。因此，您可以将任何 Publisher 作为输入传递并在输出上应用操作，但您需要调整输出以用于另一个反应式库。只要可行，Spring Data 就会透明地适应 RxJava 或其他响应式库的使用。",-1),P=e("h2",{id:"自动化",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#自动化","aria-hidden":"true"},"#"),r(" 自动化")],-1),B=e("h3",{id:"自动创建表",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#自动创建表","aria-hidden":"true"},"#"),r(" 自动创建表")],-1),C={href:"https://ktor.io/docs/interactive-website-add-persistence.html",target:"_blank",rel:"noopener noreferrer"},A=e("br",null,null,-1),I={href:"https://github.com/JetBrains/Exposed/wiki/DataTypes",target:"_blank",rel:"noopener noreferrer"},S=e("h3",{id:"实体生成器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#实体生成器","aria-hidden":"true"},"#"),r(" 实体生成器")],-1),y={href:"https://github.com/square/kotlinpoet/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/square/javapoet",target:"_blank",rel:"noopener noreferrer"},j={href:"https://square.github.io/kotlinpoet/",target:"_blank",rel:"noopener noreferrer"},J=e("h2",{id:"数据插入",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数据插入","aria-hidden":"true"},"#"),r(" 数据插入")],-1),M={href:"https://docs.spring.io/spring-data/r2dbc/docs/current/reference/html/#entity-callbacks",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.spring.io/spring-data/r2dbc/docs/current/reference/html/#auditing",target:"_blank",rel:"noopener noreferrer"},F=e("h2",{id:"参考",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),r(" 参考")],-1),N={href:"https://docs.spring.io/spring-data/r2dbc/docs/current/reference/html/",target:"_blank",rel:"noopener noreferrer"},w=e("br",null,null,-1),V={href:"https://r2dbc.io/",target:"_blank",rel:"noopener noreferrer"},K=e("br",null,null,-1),L={href:"https://blog.csdn.net/weixin_42182797/article/details/117216371",target:"_blank",rel:"noopener noreferrer"};function T(W,X){const t=i("ExternalLinkIcon");return n(),s("div",null,[h,e("p",null,[r("是响应式 "),d,r(" 是一套以观察者和被观察为基础的编程模型，根据被观察者数据变化做出响应。从这方面来说， 非阻塞的是响应式的而不是被阻塞。是在操作完成或数据可用时对通知做出反应。"),_,e("a",p,[r("Reactive Streams"),a(t)]),r(" 是一个小规范（在 Java 9 中也采用），它定义了异步组件与背压之间的交互。反应式流的主要目的是让订阅者控制发布者生成数据的速度或速度。")]),u,b,e("p",null,[e("a",f,[r("Project Reactor"),a(t)]),r(" 是 Spring Data R2DBC 使用的响应式库。它提供了 "),e("a",g,[m,a(t)]),r(" 和 "),e("a",v,[R,a(t)]),r(" API 类型，通过一组与 ReactiveX 相似的操作函数来处理 0..1（"),k,r("）和 0..N（"),x,r("）的数据序列。")]),D,P,B,e("p",null,[e("a",C,[r("Database persistence with Exposed - Ktor"),a(t)]),A,r(" 类型对应关系"),e("a",I,[r("DataTypes"),a(t)])]),S,e("p",null,[e("a",y,[r("KotlinPoet"),a(t)]),r("、 "),e("a",E,[r("JavaPoet"),a(t)]),r(" 生成代码")]),e("p",null,[e("a",j,[r("KotlinPoet Doc"),a(t)])]),J,e("p",null,[r("自定义数据更新 "),e("a",M,[r("Entity Callbacks"),a(t)])]),e("p",null,[r("跟踪谁创建或更改了实体以及更改发生的时间 "),e("a",q,[r("Auditing"),a(t)])]),F,e("p",null,[e("a",N,[r("Spring Data R2DBC - Reference Documentation"),a(t)]),w,e("a",V,[r("https://r2dbc.io"),a(t)]),K,e("a",L,[r("WebFlux实战——R2DBC连接池（r2dbc-pool）配置"),a(t)])])])}const Y=o(l,[["render",T],["__file","r2dbc.html.vue"]]);export{Y as default};
